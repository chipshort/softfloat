#![allow(
    dead_code,
    mutable_transmutes,
    non_camel_case_types,
    non_snake_case,
    non_upper_case_globals,
    unused_assignments,
    unused_mut,
    unused_imports,
    unused_parens,
    clippy::all
)]

mod _8086;
mod extF80M_add;
mod extF80M_div;
mod extF80M_eq;
mod extF80M_eq_signaling;
mod extF80M_le;
mod extF80M_le_quiet;
mod extF80M_lt;
mod extF80M_lt_quiet;
mod extF80M_mul;
mod extF80M_rem;
mod extF80M_roundToInt;
mod extF80M_sqrt;
mod extF80M_sub;
mod extF80M_to_f128M;
mod extF80M_to_f16;
mod extF80M_to_f32;
mod extF80M_to_f64;
mod extF80M_to_i32;
mod extF80M_to_i32_r_minMag;
mod extF80M_to_i64;
mod extF80M_to_i64_r_minMag;
mod extF80M_to_ui32;
mod extF80M_to_ui32_r_minMag;
mod extF80M_to_ui64;
mod extF80M_to_ui64_r_minMag;
mod extF80_add;
mod extF80_div;
mod extF80_eq;
mod extF80_eq_signaling;
mod extF80_isSignalingNaN;
mod extF80_le;
mod extF80_le_quiet;
mod extF80_lt;
mod extF80_lt_quiet;
mod extF80_mul;
mod extF80_rem;
mod extF80_roundToInt;
mod extF80_sqrt;
mod extF80_sub;
mod extF80_to_f128;
mod extF80_to_f16;
mod extF80_to_f32;
mod extF80_to_f64;
mod extF80_to_i32;
mod extF80_to_i32_r_minMag;
mod extF80_to_i64;
mod extF80_to_i64_r_minMag;
mod extF80_to_ui32;
mod extF80_to_ui32_r_minMag;
mod extF80_to_ui64;
mod extF80_to_ui64_r_minMag;
mod f128M_add;
mod f128M_div;
mod f128M_eq;
mod f128M_eq_signaling;
mod f128M_le;
mod f128M_le_quiet;
mod f128M_lt;
mod f128M_lt_quiet;
mod f128M_mul;
mod f128M_mulAdd;
mod f128M_rem;
mod f128M_roundToInt;
mod f128M_sqrt;
mod f128M_sub;
mod f128M_to_extF80M;
mod f128M_to_f16;
mod f128M_to_f32;
mod f128M_to_f64;
mod f128M_to_i32;
mod f128M_to_i32_r_minMag;
mod f128M_to_i64;
mod f128M_to_i64_r_minMag;
mod f128M_to_ui32;
mod f128M_to_ui32_r_minMag;
mod f128M_to_ui64;
mod f128M_to_ui64_r_minMag;
mod f128_add;
mod f128_div;
mod f128_eq;
mod f128_eq_signaling;
mod f128_isSignalingNaN;
mod f128_le;
mod f128_le_quiet;
mod f128_lt;
mod f128_lt_quiet;
mod f128_mul;
mod f128_mulAdd;
mod f128_rem;
mod f128_roundToInt;
mod f128_sqrt;
mod f128_sub;
mod f128_to_extF80;
mod f128_to_f16;
mod f128_to_f32;
mod f128_to_f64;
mod f128_to_i32;
mod f128_to_i32_r_minMag;
mod f128_to_i64;
mod f128_to_i64_r_minMag;
mod f128_to_ui32;
mod f128_to_ui32_r_minMag;
mod f128_to_ui64;
mod f128_to_ui64_r_minMag;
mod f16_add;
mod f16_div;
mod f16_eq;
mod f16_eq_signaling;
mod f16_isSignalingNaN;
mod f16_le;
mod f16_le_quiet;
mod f16_lt;
mod f16_lt_quiet;
mod f16_mul;
mod f16_mulAdd;
mod f16_rem;
mod f16_roundToInt;
mod f16_sqrt;
mod f16_sub;
mod f16_to_extF80;
mod f16_to_extF80M;
mod f16_to_f128;
mod f16_to_f128M;
mod f16_to_f32;
mod f16_to_f64;
mod f16_to_i32;
mod f16_to_i32_r_minMag;
mod f16_to_i64;
mod f16_to_i64_r_minMag;
mod f16_to_ui32;
mod f16_to_ui32_r_minMag;
mod f16_to_ui64;
mod f16_to_ui64_r_minMag;
mod f32_add;
mod f32_div;
mod f32_eq;
mod f32_eq_signaling;
mod f32_isSignalingNaN;
mod f32_le;
mod f32_le_quiet;
mod f32_lt;
mod f32_lt_quiet;
mod f32_mul;
mod f32_mulAdd;
mod f32_rem;
mod f32_roundToInt;
mod f32_sqrt;
mod f32_sub;
mod f32_to_extF80;
mod f32_to_extF80M;
mod f32_to_f128;
mod f32_to_f128M;
mod f32_to_f16;
mod f32_to_f64;
mod f32_to_i32;
mod f32_to_i32_r_minMag;
mod f32_to_i64;
mod f32_to_i64_r_minMag;
mod f32_to_ui32;
mod f32_to_ui32_r_minMag;
mod f32_to_ui64;
mod f32_to_ui64_r_minMag;
mod f64_add;
mod f64_div;
mod f64_eq;
mod f64_eq_signaling;
mod f64_isSignalingNaN;
mod f64_le;
mod f64_le_quiet;
mod f64_lt;
mod f64_lt_quiet;
mod f64_mul;
mod f64_mulAdd;
mod f64_rem;
mod f64_roundToInt;
mod f64_sqrt;
mod f64_sub;
mod f64_to_extF80;
mod f64_to_extF80M;
mod f64_to_f128;
mod f64_to_f128M;
mod f64_to_f16;
mod f64_to_f32;
mod f64_to_i32;
mod f64_to_i32_r_minMag;
mod f64_to_i64;
mod f64_to_i64_r_minMag;
mod f64_to_ui32;
mod f64_to_ui32_r_minMag;
mod f64_to_ui64;
mod f64_to_ui64_r_minMag;
mod i32_to_extF80;
mod i32_to_extF80M;
mod i32_to_f128;
mod i32_to_f128M;
mod i32_to_f16;
mod i32_to_f32;
mod i32_to_f64;
mod i64_to_extF80;
mod i64_to_extF80M;
mod i64_to_f128;
mod i64_to_f128M;
mod i64_to_f16;
mod i64_to_f32;
mod i64_to_f64;
mod s_add128;
mod s_add256M;
mod s_addMagsExtF80;
mod s_addMagsF128;
mod s_addMagsF16;
mod s_addMagsF32;
mod s_addMagsF64;
mod s_approxRecip32_1;
mod s_approxRecipSqrt32_1;
mod s_approxRecipSqrt_1Ks;
mod s_approxRecip_1Ks;
mod s_countLeadingZeros16;
mod s_countLeadingZeros32;
mod s_countLeadingZeros64;
mod s_countLeadingZeros8;
mod s_eq128;
mod s_le128;
mod s_lt128;
mod s_mul128By32;
mod s_mul128To256M;
mod s_mul64ByShifted32To128;
mod s_mul64To128;
mod s_mulAddF128;
mod s_mulAddF16;
mod s_mulAddF32;
mod s_mulAddF64;
mod s_normRoundPackToExtF80;
mod s_normRoundPackToF128;
mod s_normRoundPackToF16;
mod s_normRoundPackToF32;
mod s_normRoundPackToF64;
mod s_normSubnormalExtF80Sig;
mod s_normSubnormalF128Sig;
mod s_normSubnormalF16Sig;
mod s_normSubnormalF32Sig;
mod s_normSubnormalF64Sig;
mod s_roundPackToExtF80;
mod s_roundPackToF128;
mod s_roundPackToF16;
mod s_roundPackToF32;
mod s_roundPackToF64;
mod s_roundToI32;
mod s_roundToI64;
mod s_roundToUI32;
mod s_roundToUI64;
mod s_shiftRightJam128;
mod s_shiftRightJam128Extra;
mod s_shiftRightJam256M;
mod s_shiftRightJam32;
mod s_shiftRightJam64;
mod s_shiftRightJam64Extra;
mod s_shortShiftLeft128;
mod s_shortShiftRight128;
mod s_shortShiftRightJam128;
mod s_shortShiftRightJam128Extra;
mod s_shortShiftRightJam64;
mod s_shortShiftRightJam64Extra;
mod s_sub128;
mod s_sub256M;
mod s_subMagsExtF80;
mod s_subMagsF128;
mod s_subMagsF16;
mod s_subMagsF32;
mod s_subMagsF64;
mod softfloat_state;
mod ui32_to_extF80;
mod ui32_to_extF80M;
mod ui32_to_f128;
mod ui32_to_f128M;
mod ui32_to_f16;
mod ui32_to_f32;
mod ui32_to_f64;
mod ui64_to_extF80;
mod ui64_to_extF80M;
mod ui64_to_f128;
mod ui64_to_f128M;
mod ui64_to_f16;
mod ui64_to_f32;
mod ui64_to_f64;

mod types;

pub use types::*;

pub use extF80M_add::*;
pub use extF80M_div::*;
pub use extF80M_eq::*;
pub use extF80M_eq_signaling::*;
pub use extF80M_le::*;
pub use extF80M_le_quiet::*;
pub use extF80M_lt::*;
pub use extF80M_lt_quiet::*;
pub use extF80M_mul::*;
pub use extF80M_rem::*;
pub use extF80M_roundToInt::*;
pub use extF80M_sqrt::*;
pub use extF80M_sub::*;
pub use extF80M_to_f128M::*;
pub use extF80M_to_f16::*;
pub use extF80M_to_f32::*;
pub use extF80M_to_f64::*;
pub use extF80M_to_i32::*;
pub use extF80M_to_i32_r_minMag::*;
pub use extF80M_to_i64::*;
pub use extF80M_to_i64_r_minMag::*;
pub use extF80M_to_ui32::*;
pub use extF80M_to_ui32_r_minMag::*;
pub use extF80M_to_ui64::*;
pub use extF80M_to_ui64_r_minMag::*;
pub use extF80_add::*;
pub use extF80_div::*;
pub use extF80_eq::*;
pub use extF80_eq_signaling::*;
pub use extF80_isSignalingNaN::*;
pub use extF80_le::*;
pub use extF80_le_quiet::*;
pub use extF80_lt::*;
pub use extF80_lt_quiet::*;
pub use extF80_mul::*;
pub use extF80_rem::*;
pub use extF80_roundToInt::*;
pub use extF80_sqrt::*;
pub use extF80_sub::*;
pub use extF80_to_f128::*;
pub use extF80_to_f16::*;
pub use extF80_to_f32::*;
pub use extF80_to_f64::*;
pub use extF80_to_i32::*;
pub use extF80_to_i32_r_minMag::*;
pub use extF80_to_i64::*;
pub use extF80_to_i64_r_minMag::*;
pub use extF80_to_ui32::*;
pub use extF80_to_ui32_r_minMag::*;
pub use extF80_to_ui64::*;
pub use extF80_to_ui64_r_minMag::*;
pub use f128M_add::*;
pub use f128M_div::*;
pub use f128M_eq::*;
pub use f128M_eq_signaling::*;
pub use f128M_le::*;
pub use f128M_le_quiet::*;
pub use f128M_lt::*;
pub use f128M_lt_quiet::*;
pub use f128M_mul::*;
pub use f128M_mulAdd::*;
pub use f128M_rem::*;
pub use f128M_roundToInt::*;
pub use f128M_sqrt::*;
pub use f128M_sub::*;
pub use f128M_to_extF80M::*;
pub use f128M_to_f16::*;
pub use f128M_to_f32::*;
pub use f128M_to_f64::*;
pub use f128M_to_i32::*;
pub use f128M_to_i32_r_minMag::*;
pub use f128M_to_i64::*;
pub use f128M_to_i64_r_minMag::*;
pub use f128M_to_ui32::*;
pub use f128M_to_ui32_r_minMag::*;
pub use f128M_to_ui64::*;
pub use f128M_to_ui64_r_minMag::*;
pub use f128_add::*;
pub use f128_div::*;
pub use f128_eq::*;
pub use f128_eq_signaling::*;
pub use f128_isSignalingNaN::*;
pub use f128_le::*;
pub use f128_le_quiet::*;
pub use f128_lt::*;
pub use f128_lt_quiet::*;
pub use f128_mul::*;
pub use f128_mulAdd::*;
pub use f128_rem::*;
pub use f128_roundToInt::*;
pub use f128_sqrt::*;
pub use f128_sub::*;
pub use f128_to_extF80::*;
pub use f128_to_f16::*;
pub use f128_to_f32::*;
pub use f128_to_f64::*;
pub use f128_to_i32::*;
pub use f128_to_i32_r_minMag::*;
pub use f128_to_i64::*;
pub use f128_to_i64_r_minMag::*;
pub use f128_to_ui32::*;
pub use f128_to_ui32_r_minMag::*;
pub use f128_to_ui64::*;
pub use f128_to_ui64_r_minMag::*;
pub use f16_add::*;
pub use f16_div::*;
pub use f16_eq::*;
pub use f16_eq_signaling::*;
pub use f16_isSignalingNaN::*;
pub use f16_le::*;
pub use f16_le_quiet::*;
pub use f16_lt::*;
pub use f16_lt_quiet::*;
pub use f16_mul::*;
pub use f16_mulAdd::*;
pub use f16_rem::*;
pub use f16_roundToInt::*;
pub use f16_sqrt::*;
pub use f16_sub::*;
pub use f16_to_extF80::*;
pub use f16_to_extF80M::*;
pub use f16_to_f128::*;
pub use f16_to_f128M::*;
pub use f16_to_f32::*;
pub use f16_to_f64::*;
pub use f16_to_i32::*;
pub use f16_to_i32_r_minMag::*;
pub use f16_to_i64::*;
pub use f16_to_i64_r_minMag::*;
pub use f16_to_ui32::*;
pub use f16_to_ui32_r_minMag::*;
pub use f16_to_ui64::*;
pub use f16_to_ui64_r_minMag::*;
pub use f32_add::*;
pub use f32_div::*;
pub use f32_eq::*;
pub use f32_eq_signaling::*;
pub use f32_isSignalingNaN::*;
pub use f32_le::*;
pub use f32_le_quiet::*;
pub use f32_lt::*;
pub use f32_lt_quiet::*;
pub use f32_mul::*;
pub use f32_mulAdd::*;
pub use f32_rem::*;
pub use f32_roundToInt::*;
pub use f32_sqrt::*;
pub use f32_sub::*;
pub use f32_to_extF80::*;
pub use f32_to_extF80M::*;
pub use f32_to_f128::*;
pub use f32_to_f128M::*;
pub use f32_to_f16::*;
pub use f32_to_f64::*;
pub use f32_to_i32::*;
pub use f32_to_i32_r_minMag::*;
pub use f32_to_i64::*;
pub use f32_to_i64_r_minMag::*;
pub use f32_to_ui32::*;
pub use f32_to_ui32_r_minMag::*;
pub use f32_to_ui64::*;
pub use f32_to_ui64_r_minMag::*;
pub use f64_add::*;
pub use f64_div::*;
pub use f64_eq::*;
pub use f64_eq_signaling::*;
pub use f64_isSignalingNaN::*;
pub use f64_le::*;
pub use f64_le_quiet::*;
pub use f64_lt::*;
pub use f64_lt_quiet::*;
pub use f64_mul::*;
pub use f64_mulAdd::*;
pub use f64_rem::*;
pub use f64_roundToInt::*;
pub use f64_sqrt::*;
pub use f64_sub::*;
pub use f64_to_extF80::*;
pub use f64_to_extF80M::*;
pub use f64_to_f128::*;
pub use f64_to_f128M::*;
pub use f64_to_f16::*;
pub use f64_to_f32::*;
pub use f64_to_i32::*;
pub use f64_to_i32_r_minMag::*;
pub use f64_to_i64::*;
pub use f64_to_i64_r_minMag::*;
pub use f64_to_ui32::*;
pub use f64_to_ui32_r_minMag::*;
pub use f64_to_ui64::*;
pub use f64_to_ui64_r_minMag::*;
pub use i32_to_extF80::*;
pub use i32_to_extF80M::*;
pub use i32_to_f128::*;
pub use i32_to_f128M::*;
pub use i32_to_f16::*;
pub use i32_to_f32::*;
pub use i32_to_f64::*;
pub use i64_to_extF80::*;
pub use i64_to_extF80M::*;
pub use i64_to_f128::*;
pub use i64_to_f128M::*;
pub use i64_to_f16::*;
pub use i64_to_f32::*;
pub use i64_to_f64::*;
pub use s_add128::*;
pub use s_add256M::*;
pub use s_addMagsExtF80::*;
pub use s_addMagsF128::*;
pub use s_addMagsF16::*;
pub use s_addMagsF32::*;
pub use s_addMagsF64::*;
pub use s_approxRecip32_1::*;
pub use s_approxRecipSqrt32_1::*;
pub use s_approxRecipSqrt_1Ks::*;
pub use s_approxRecip_1Ks::*;
pub use s_countLeadingZeros16::*;
pub use s_countLeadingZeros32::*;
pub use s_countLeadingZeros64::*;
pub use s_countLeadingZeros8::*;
pub use s_eq128::*;
pub use s_le128::*;
pub use s_lt128::*;
pub use s_mul128By32::*;
pub use s_mul128To256M::*;
pub use s_mul64ByShifted32To128::*;
pub use s_mul64To128::*;
pub use s_mulAddF128::*;
pub use s_mulAddF16::*;
pub use s_mulAddF32::*;
pub use s_mulAddF64::*;
pub use s_normRoundPackToExtF80::*;
pub use s_normRoundPackToF128::*;
pub use s_normRoundPackToF16::*;
pub use s_normRoundPackToF32::*;
pub use s_normRoundPackToF64::*;
pub use s_normSubnormalExtF80Sig::*;
pub use s_normSubnormalF128Sig::*;
pub use s_normSubnormalF16Sig::*;
pub use s_normSubnormalF32Sig::*;
pub use s_normSubnormalF64Sig::*;
pub use s_roundPackToExtF80::*;
pub use s_roundPackToF128::*;
pub use s_roundPackToF16::*;
pub use s_roundPackToF32::*;
pub use s_roundPackToF64::*;
pub use s_roundToI32::*;
pub use s_roundToI64::*;
pub use s_roundToUI32::*;
pub use s_roundToUI64::*;
pub use s_shiftRightJam128::*;
pub use s_shiftRightJam128Extra::*;
pub use s_shiftRightJam256M::*;
pub use s_shiftRightJam32::*;
pub use s_shiftRightJam64::*;
pub use s_shiftRightJam64Extra::*;
pub use s_shortShiftLeft128::*;
pub use s_shortShiftRight128::*;
pub use s_shortShiftRightJam128::*;
pub use s_shortShiftRightJam128Extra::*;
pub use s_shortShiftRightJam64::*;
pub use s_shortShiftRightJam64Extra::*;
pub use s_sub128::*;
pub use s_sub256M::*;
pub use s_subMagsExtF80::*;
pub use s_subMagsF128::*;
pub use s_subMagsF16::*;
pub use s_subMagsF32::*;
pub use s_subMagsF64::*;
pub use softfloat_state::*;
pub use ui32_to_extF80::*;
pub use ui32_to_extF80M::*;
pub use ui32_to_f128::*;
pub use ui32_to_f128M::*;
pub use ui32_to_f16::*;
pub use ui32_to_f32::*;
pub use ui32_to_f64::*;
pub use ui64_to_extF80::*;
pub use ui64_to_extF80M::*;
pub use ui64_to_f128::*;
pub use ui64_to_f128M::*;
pub use ui64_to_f16::*;
pub use ui64_to_f32::*;
pub use ui64_to_f64::*;
pub use _8086::*;

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_f32_div() {
        let a = 1.0f32;
        let b = 2.0f32;

        let res = unsafe { f32_div(float32_t { v: a.to_bits() }, float32_t { v: b.to_bits() }) };
        assert_eq!(res.v, 0.5f32.to_bits());
    }

    #[test]
    fn test_u32_conv() {
        use super::ui32_to_f64::*;
        assert_eq!(
            unsafe { ui32_to_f64(u32::MAX).v },
            (u32::MAX as f64).to_bits()
        );
    }

    #[test]
    fn test_f64_conv() {
        assert_eq!(
            unsafe { ui64_to_f64(u64::MAX).v },
            (u64::MAX as f64).to_bits()
        );
    }

    #[test]
    fn test_f32_add() {
        assert_eq!(
            unsafe {
                f32_add(
                    float32_t {
                        v: 0.5f32.to_bits(),
                    },
                    float32_t {
                        v: 1.5f32.to_bits(),
                    },
                )
                .v
            },
            2f32.to_bits()
        );
    }
}
